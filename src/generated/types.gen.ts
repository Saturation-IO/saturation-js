// This file is auto-generated by @hey-api/openapi-ts

export type Project = {
    /**
     * Project identifier (alias in user mode, UUID in system mode)
     */
    id: string;
    /**
     * Project display name
     */
    name?: string | null;
    /**
     * Project icon or emoji
     */
    icon?: string | null;
    /**
     * Project image URL
     */
    imageUrl?: string | null;
    /**
     * Associated project space ID (deprecated, use space object)
     */
    spaceId?: string | null;
    /**
     * Project space/folder information
     */
    space?: {
        /**
         * Space identifier
         */
        id?: string;
        /**
         * Space display name
         */
        name?: string;
    } | null;
    /**
     * Template project ID (deprecated, use template object)
     */
    templateId?: string | null;
    /**
     * Template project information
     */
    template?: {
        /**
         * Template identifier
         */
        id?: string;
        /**
         * Template name
         */
        name?: string;
    } | null;
    /**
     * Project status
     */
    status: 'active' | 'archived';
    /**
     * Project labels for categorization
     */
    labels?: Array<string>;
    /**
     * Project creation timestamp
     */
    createdAt: string;
    /**
     * Project last update timestamp
     */
    updatedAt: string;
};

export type CreateProjectInput = {
    /**
     * Project display name (defaults to "Untitled Project")
     */
    name?: string | null;
    /**
     * Project icon or emoji
     */
    icon?: string | null;
    /**
     * Project image URL
     */
    imageUrl?: string | null;
    /**
     * Associated project space ID
     */
    spaceId?: string | null;
    /**
     * Project status
     */
    status?: 'active' | 'archived';
    /**
     * Template project ID if creating from template
     */
    templateId?: string | null;
    /**
     * Labels to assign to the project (will be created if they don't exist)
     */
    labels?: Array<string>;
};

export type UpdateProjectInput = {
    /**
     * Project display name
     */
    name?: string | null;
    /**
     * Project icon or emoji
     */
    icon?: string | null;
    /**
     * Project image URL
     */
    imageUrl?: string | null;
    /**
     * Associated project space ID
     */
    spaceId?: string | null;
    /**
     * Project status
     */
    status?: 'active' | 'archived';
    /**
     * Labels for the project (replaces all existing labels)
     */
    labels?: Array<string>;
};

/**
 * Request body for creating budget lines within an account.
 * If the target account doesn't exist, it will be automatically created along with any necessary parent accounts.
 *
 */
export type CreateBudgetInput = {
    /**
     * Target account ID or account code where lines will be added. Use "root" for top-level budget.
     * The account must already exist in the budget hierarchy.
     *
     */
    accountId?: string;
    /**
     * Array of budget lines to create (line items, accounts, subtotals, or markups)
     */
    lines?: Array<{
        /**
         * Type of budget line
         */
        type?: 'line' | 'account' | 'subtotal' | 'markup';
        /**
         * Account code or ID
         */
        accountId?: string;
        /**
         * Line description
         */
        description?: string;
        /**
         * Phase-specific data
         */
        phaseData?: {
            [key: string]: unknown;
        };
    }>;
    /**
     * Where to insert the new lines
     */
    insert?: {
        mode?: 'append' | 'prepend' | 'after' | 'before';
        /**
         * Line ID for after/before mode
         */
        lineId?: string;
    };
    /**
     * ID interpretation mode - "user" for human-friendly IDs (default), "system" for database IDs
     */
    idMode?: 'user' | 'system';
};

export type Budget = {
    account: Account;
    /**
     * Sub-account hierarchy
     */
    subAccounts?: {
        [key: string]: Account;
    };
    /**
     * Budget phases
     */
    phases?: Array<Phase>;
    /**
     * Fringe benefits
     */
    fringes?: Array<Fringe>;
    /**
     * Global variables
     */
    globals?: Array<Global>;
};

export type Account = {
    /**
     * Account system identifier
     */
    id: string;
    /**
     * User-friendly account code/number
     */
    accountId?: string | null;
    /**
     * Account description
     */
    description?: string | null;
    /**
     * Hierarchical path in budget tree
     */
    path: string;
    /**
     * Budget lines within this account
     */
    lines: Array<BudgetLine>;
    /**
     * Calculated totals for each phase
     */
    totals: {
        [key: string]: number;
    };
    contact?: Contact;
};

export type BudgetLine = {
    /**
     * Type of budget line
     */
    type: 'line' | 'account' | 'subtotal' | 'markup' | 'fringes';
    /**
     * Budget line identifier (system ID)
     */
    id: string;
    /**
     * Account identifier (user-friendly ID like account code)
     */
    accountId?: string | null;
    /**
     * Budget line description
     */
    description?: string | null;
    /**
     * Hierarchical path in budget tree (e.g., /2000/2150)
     */
    path: string;
    /**
     * Calculated totals for each phase
     */
    totals: {
        [key: string]: number;
    };
    /**
     * Tags for categorization and filtering
     */
    tags?: Array<string>;
    contact?: Contact;
    /**
     * Detailed phase-specific data (expandable)
     */
    phaseData?: {
        [key: string]: LinePhaseData;
    };
};

export type BudgetLineItem = BudgetLine & {
    type: 'line';
} & {
    /**
     * Always "line" for regular budget line items
     */
    type?: 'line';
};

export type BudgetAccountLine = BudgetLine & {
    type: 'account';
} & {
    /**
     * Always "account" for account lines
     */
    type?: 'account';
};

export type BudgetSubtotalLine = BudgetLine & {
    type: 'subtotal';
} & {
    /**
     * Always "subtotal" for subtotal lines
     */
    type?: 'subtotal';
    /**
     * URL-friendly slug derived from description
     */
    alias?: string | null;
    /**
     * Visual color for UI display
     */
    color?: 'red' | 'rose' | 'pink' | 'fuchsia' | 'purple' | 'violet' | 'indigo' | 'blue' | 'sky' | 'cyan' | 'teal' | 'green' | 'yellow' | 'amber' | 'orange';
};

export type BudgetMarkupLine = BudgetLine & {
    type: 'markup';
} & {
    /**
     * Always "markup" for markup/overhead lines
     */
    type?: 'markup';
    /**
     * Account IDs this markup applies to
     */
    includeAccounts?: Array<string>;
};

export type BudgetFringeLine = BudgetLine & {
    type: 'fringes';
} & {
    /**
     * Always "fringes" for fringe benefit lines
     */
    type?: 'fringes';
    /**
     * Detailed fringe calculations by phase and type
     */
    breakdown?: {
        [key: string]: {
            [key: string]: FringeBreakdown;
        };
    };
};

export type LinePhaseData = {
    /**
     * Quantity value for calculations
     */
    quantity?: number | null;
    /**
     * Unit of measurement
     */
    unit?: string | null;
    /**
     * Rate per unit
     */
    rate?: number | null;
    /**
     * Multiplier factor
     */
    multiplier?: number | null;
    /**
     * Applied fringe benefit IDs
     */
    fringes?: Array<string>;
    /**
     * Date range for this phase data
     */
    date?: {
        startDate?: string | null;
        endDate?: string | null;
    };
    /**
     * Overtime hours
     */
    overtime?: number | null;
    overtimeDetail?: OvertimeDetail;
    /**
     * Formula for dynamic quantity calculation
     */
    quantityFormula?: string;
    /**
     * Formula for dynamic rate calculation
     */
    rateFormula?: string;
    /**
     * Formula for dynamic multiplier calculation
     */
    multiplierFormula?: string;
    /**
     * Total fringe benefit amount
     */
    fringeTotal?: number;
    /**
     * Breakdown of fringe calculations
     */
    fringeBreakdown?: {
        [key: string]: FringeBreakdown;
    };
};

export type FringeBreakdown = {
    /**
     * Fringe benefit identifier
     */
    id: string;
    /**
     * Fringe code (e.g., FICA, HEALTH)
     */
    code?: string | null;
    /**
     * Calculated fringe amount
     */
    amount: number;
};

export type OvertimeDetail = {
    /**
     * Overtime calculation mode
     */
    mode: 'formula' | 'flat';
    /**
     * Fixed overtime amount (for flat mode)
     */
    flatAmount?: number;
    /**
     * Number of overtime hours
     */
    overtimeHours?: number;
    /**
     * Regular hours before overtime
     */
    baseHours: number;
    /**
     * Overtime multiplier thresholds
     */
    multipliers?: Array<{
        /**
         * Hour threshold for this multiplier
         */
        threshold?: number;
        /**
         * Multiplier rate (e.g., 1.5 for time-and-a-half)
         */
        multiplier?: number;
    }>;
};

export type Phase = {
    /**
     * Phase type
     */
    type: 'estimate' | 'actual' | 'rollup' | 'committed';
    /**
     * Phase system identifier
     */
    id: string;
    /**
     * User-friendly phase alias
     */
    alias: string;
    /**
     * Phase display name
     */
    name?: string | null;
    /**
     * Whether phase is hidden from view
     */
    isHidden: boolean;
    /**
     * Whether phase is locked from editing
     */
    isLocked: boolean;
    /**
     * Currency configuration (for estimate phases)
     */
    currency?: {
        /**
         * ISO 4217 currency code
         */
        code?: string | null;
        /**
         * Currency symbol
         */
        symbol?: string | null;
        /**
         * Exchange rate multiplier
         */
        exchangeRate?: number | null;
    } | null;
    /**
     * Rollup operation (for rollup phases)
     */
    operation?: 'sum' | 'difference';
    /**
     * Phase IDs to aggregate (for rollup phases)
     */
    phaseIds?: Array<string>;
};

export type Fringe = {
    /**
     * Fringe system identifier
     */
    id: string;
    /**
     * User-friendly fringe code
     */
    code?: string | null;
    /**
     * Fringe benefit description
     */
    description?: string | null;
    /**
     * Fringe calculation units
     */
    units: 'percent' | 'flat';
    /**
     * Fringe rate (decimal for percent, amount for flat)
     */
    rate?: number | null;
    /**
     * Maximum salary subject to this fringe
     */
    cutoff?: number | null;
};

export type Global = {
    /**
     * Global variable system identifier
     */
    id: string;
    /**
     * Variable symbol for use in formulas
     */
    symbol?: string | null;
    /**
     * Variable description
     */
    description?: string | null;
    /**
     * Unit of measurement
     */
    unit?: string | null;
    /**
     * Formula expression for calculating value
     */
    formula?: string | null;
};

export type Actual = {
    /**
     * Actual entry identifier
     */
    id: string;
    /**
     * Actual entry description
     */
    description?: string | null;
    /**
     * Actual amount
     */
    amount?: number | null;
    /**
     * Actual entry date
     */
    date?: string | null;
    /**
     * Associated account ID(s)
     */
    accountId?: string | null | Array<string>;
    /**
     * Whether this actual has sub-actuals
     */
    expanded: boolean;
    /**
     * Actual entry type
     */
    type?: string;
    /**
     * Attached files
     */
    attachments?: Array<File>;
    /**
     * Reference identifier
     */
    ref?: string | null;
    /**
     * Payment identifier
     */
    payId?: string | null;
    /**
     * Actual entry status
     */
    status?: string;
    /**
     * Additional notes
     */
    notes?: string | null;
    /**
     * Associated tags
     */
    tags?: Array<string>;
    /**
     * Associated purchase order ID
     */
    purchaseOrderId?: string | null;
    /**
     * Associated transaction ID
     */
    transactionId?: string | null;
    contact?: Contact;
    /**
     * Sub-actual entries
     */
    subactuals?: Array<SubActual>;
    account?: BudgetLine;
};

export type SubActual = {
    /**
     * Sub-actual identifier
     */
    id: string;
    /**
     * Sub-actual description
     */
    description?: string | null;
    /**
     * Sub-actual amount
     */
    amount: number;
    /**
     * Sub-actual date
     */
    date?: string | null;
    /**
     * Associated account ID
     */
    accountId?: string | null;
    account?: BudgetLine;
};

export type Contact = {
    /**
     * Contact identifier
     */
    id: string;
    /**
     * Contact display title
     */
    contactTitle?: string | null;
    /**
     * Contact name
     */
    name?: string | null;
    /**
     * Contact email address
     */
    email?: string | null;
    /**
     * Contact company
     */
    company?: string | null;
    /**
     * Contact type (Person, Company, etc.)
     */
    type?: string | null;
    /**
     * Contact job title
     */
    jobTitle?: string | null;
    /**
     * Contact hourly rate
     */
    rate?: number | null;
    secureInfo?: ContactSecureInfo;
    origin?: ContactOrigin;
    /**
     * Startwork agreements
     */
    startwork?: Array<ContactStartwork>;
    linkedUser?: ContactUser;
    /**
     * Banking information
     */
    bankInfo?: Array<ContactBankAccount>;
    /**
     * Tax documents
     */
    taxDocuments?: Array<File>;
    /**
     * File attachments
     */
    attachments?: Array<File>;
    /**
     * Associated projects
     */
    projects?: {
        [key: string]: ContactProject;
    };
};

export type ContactSecureInfo = {
    /**
     * Contact address
     */
    address?: string | null;
    /**
     * Contact phone number
     */
    phone?: string | null;
    /**
     * Last 4 digits of tax ID
     */
    taxIdLast4?: string | null;
};

export type ContactOrigin = {
    /**
     * How the contact was created
     */
    origin?: 'onboarding' | 'manual';
    /**
     * Contact creation timestamp
     */
    createdAt?: string | null;
    createdByUser?: ContactUser;
};

export type ContactStartwork = {
    /**
     * Startwork agreement identifier
     */
    id: string;
    /**
     * Agreement title
     */
    title: string;
    /**
     * Signature timestamp
     */
    signedOn: string;
};

export type ContactUser = {
    /**
     * User identifier
     */
    id: string;
    /**
     * User name
     */
    name: string;
    /**
     * User email address
     */
    email: string;
};

export type ContactBankAccount = {
    /**
     * Bank account identifier
     */
    id: string;
    /**
     * Bank name
     */
    bankName: string;
    /**
     * Account type (checking, savings, etc.)
     */
    accountType: string;
    /**
     * Last 4 digits of account number
     */
    accountLast4: string;
};

/**
 * Input for creating a new contact
 */
export type CreateContactInput = {
    /**
     * Contact name
     */
    name: string;
    /**
     * Contact email address
     */
    email?: string;
    /**
     * Company name
     */
    company?: string;
    /**
     * Contact type
     */
    type?: 'Person' | 'Company';
    /**
     * Job title
     */
    jobTitle?: string;
    /**
     * Hourly rate
     */
    rate?: number;
    /**
     * Phone number
     */
    phone?: string;
    /**
     * Physical address
     */
    address?: string;
    /**
     * Last 4 digits of tax ID
     */
    taxIdLast4?: string;
};

/**
 * Input for updating an existing contact
 */
export type UpdateContactInput = {
    /**
     * Contact name
     */
    name?: string;
    /**
     * Contact email address
     */
    email?: string;
    /**
     * Company name
     */
    company?: string;
    /**
     * Contact type
     */
    type?: 'Person' | 'Company';
    /**
     * Job title
     */
    jobTitle?: string;
    /**
     * Hourly rate
     */
    rate?: number;
    /**
     * Phone number
     */
    phone?: string;
    /**
     * Physical address
     */
    address?: string;
    /**
     * Last 4 digits of tax ID
     */
    taxIdLast4?: string;
};

export type ContactProject = {
    /**
     * Project identifier
     */
    id: string;
    /**
     * Project name
     */
    name: string;
    /**
     * Project alias
     */
    alias: string;
    /**
     * Associated accounts within this project
     */
    accounts?: Array<ContactProjectAccount>;
};

export type ContactProjectAccount = {
    /**
     * Account identifier
     */
    accountId: string;
    /**
     * Account number
     */
    accountNumber: string;
    /**
     * Account name
     */
    accountName: string;
};

export type PurchaseOrder = {
    /**
     * Purchase order identifier
     */
    id: string;
    /**
     * Purchase order number
     */
    purchaseOrderId?: string | null;
    /**
     * Purchase order title
     */
    title?: string | null;
    /**
     * Purchase order date
     */
    date?: string | null;
    /**
     * Total amount
     */
    amount: number;
    /**
     * Amount paid
     */
    paidAmount: number;
    /**
     * Purchase order status
     */
    status: 'draft' | 'approved' | 'rejected' | 'pending' | 'paid';
    /**
     * Attached files
     */
    attachments?: Array<File>;
    /**
     * Additional notes
     */
    notes?: string | null;
    /**
     * Line items
     */
    items?: Array<PurchaseOrderItem>;
    contact?: Contact;
    /**
     * Associated actual entries
     */
    actuals?: Array<Actual>;
};

/**
 * Input for creating a new purchase order
 */
export type CreatePurchaseOrderInput = {
    /**
     * Purchase order number
     */
    purchaseOrderId?: string;
    /**
     * Purchase order title
     */
    title?: string;
    /**
     * Purchase order date
     */
    date?: string;
    /**
     * Total amount
     */
    amount: number;
    /**
     * Purchase order status
     */
    status?: 'draft' | 'approved' | 'rejected' | 'pending' | 'paid';
    /**
     * Additional notes
     */
    notes?: string;
    /**
     * Associated contact ID
     */
    contactId?: string;
    /**
     * Line items
     */
    items?: Array<CreatePurchaseOrderItemInput>;
};

/**
 * Input for updating an existing purchase order
 */
export type UpdatePurchaseOrderInput = {
    /**
     * Purchase order number
     */
    purchaseOrderId?: string;
    /**
     * Purchase order title
     */
    title?: string;
    /**
     * Purchase order date
     */
    date?: string;
    /**
     * Total amount
     */
    amount?: number;
    /**
     * Purchase order status
     */
    status?: 'draft' | 'approved' | 'rejected' | 'pending' | 'paid';
    /**
     * Additional notes
     */
    notes?: string;
    /**
     * Associated contact ID
     */
    contactId?: string;
};

/**
 * Input for purchase order line item
 */
export type CreatePurchaseOrderItemInput = {
    /**
     * Item description
     */
    description?: string;
    /**
     * Item quantity
     */
    quantity?: number;
    /**
     * Price per unit
     */
    unitPrice?: number;
    /**
     * Total line price
     */
    totalPrice?: number;
    /**
     * Associated account ID
     */
    accountId?: string;
};

/**
 * Input for creating a new actual entry
 */
export type CreateActualInput = {
    /**
     * Actual entry description
     */
    description: string;
    /**
     * Actual amount
     */
    amount: number;
    /**
     * Actual date
     */
    date: string;
    /**
     * Associated account ID(s)
     */
    accountId?: string | Array<string>;
    /**
     * Reference identifier
     */
    ref?: string;
    /**
     * Payment identifier
     */
    payId?: string;
    /**
     * Actual entry status
     */
    status?: string;
    /**
     * Additional notes
     */
    notes?: string;
    /**
     * Associated tags
     */
    tags?: Array<string>;
    /**
     * Associated purchase order ID
     */
    purchaseOrderId?: string;
    /**
     * Associated transaction ID
     */
    transactionId?: string;
    /**
     * Associated contact ID
     */
    contactId?: string;
};

/**
 * Input for updating an existing actual entry
 */
export type UpdateActualInput = {
    /**
     * Actual entry description
     */
    description?: string;
    /**
     * Actual amount
     */
    amount?: number;
    /**
     * Actual date
     */
    date?: string;
    /**
     * Associated account ID(s)
     */
    accountId?: string | Array<string>;
    /**
     * Reference identifier
     */
    ref?: string;
    /**
     * Payment identifier
     */
    payId?: string;
    /**
     * Actual entry status
     */
    status?: string;
    /**
     * Additional notes
     */
    notes?: string;
    /**
     * Associated tags
     */
    tags?: Array<string>;
    /**
     * Associated purchase order ID
     */
    purchaseOrderId?: string;
    /**
     * Associated transaction ID
     */
    transactionId?: string;
    /**
     * Associated contact ID
     */
    contactId?: string;
};

/**
 * Input for updating an existing transaction
 */
export type UpdateTransactionInput = {
    /**
     * Associated project ID
     */
    projectId?: string;
    /**
     * Associated account ID
     */
    accountId?: string;
    /**
     * Associated contact ID
     */
    contactId?: string;
    /**
     * Transaction description
     */
    description?: string;
    /**
     * Additional notes
     */
    notes?: string;
};

export type PurchaseOrderItem = {
    /**
     * Item identifier
     */
    id: string;
    /**
     * Item description
     */
    description?: string | null;
    /**
     * Item quantity
     */
    quantity: number;
    /**
     * Price per unit
     */
    unitPrice: number;
    /**
     * Total line price
     */
    totalPrice: number;
    /**
     * Associated account ID
     */
    accountId?: string | null;
    account?: BudgetLine;
};

export type Transaction = {
    /**
     * Transaction identifier
     */
    id: string;
    /**
     * Transaction type
     */
    type: 'bank.deposit' | 'bank.withdrawal' | 'bank.ach' | 'bank.wire' | 'card.spend' | 'card.payment' | 'card.dispute' | 'card.refund' | 'card.cashback';
    /**
     * Transaction status
     */
    status: 'posted' | 'pending' | 'void';
    /**
     * Transaction sub-status
     */
    subStatus?: 'settled' | 'refund' | 'reverse' | 'rejected';
    /**
     * Transaction description
     */
    description: string;
    /**
     * Transaction amount
     */
    amount: number;
    /**
     * Transaction date
     */
    date: string;
    /**
     * Associated project ID
     */
    projectId?: string | null;
    /**
     * Whether transaction has account assignment
     */
    hasAccount: boolean;
    /**
     * Whether transaction has been converted to actual
     */
    isActualized: boolean;
    source?: TransactionSource;
    /**
     * Attached files
     */
    attachments?: Array<File>;
    contact?: Contact;
    project?: Project;
    account?: BudgetLine;
    actual?: Actual;
};

export type TransactionSource = {
    /**
     * Source identifier
     */
    id: string;
    /**
     * Source type (bank, card, etc.)
     */
    type: string;
    /**
     * Source name
     */
    name: string;
    /**
     * Last 4 digits of source identifier
     */
    last4: string;
};

export type File = {
    /**
     * File identifier (DigitalOcean Spaces object key)
     */
    id: string;
    /**
     * Original filename
     */
    name: string;
    /**
     * MIME type
     */
    type: string;
    /**
     * File size in bytes
     */
    size: number;
};

/**
 * Project space/folder for organizing projects
 */
export type Space = {
    /**
     * Space identifier (alias in user mode, UUID in system mode)
     */
    id: string;
    /**
     * URL-friendly space identifier
     */
    alias: string;
    /**
     * Space display name
     */
    name: string;
    /**
     * Space image/banner URL
     */
    image?: string | null;
    /**
     * Whether the space is archived
     */
    archived: boolean;
    /**
     * Number of projects in this space
     */
    projectCount?: number;
    /**
     * Projects in this space (when expanded)
     */
    projects?: Array<Project>;
    /**
     * Space creation timestamp
     */
    createdAt?: string;
    /**
     * Space last update timestamp
     */
    updatedAt?: string;
};

export type CreateSpaceInput = {
    /**
     * Space name (required)
     */
    name: string;
    /**
     * Space image/banner URL
     */
    image?: string | null;
    /**
     * Initial archived status
     */
    archived?: boolean;
};

export type UpdateSpaceInput = {
    /**
     * Updated space name
     */
    name?: string;
    /**
     * Updated space image URL
     */
    image?: string | null;
    /**
     * Updated archived status
     */
    archived?: boolean;
};

/**
 * Budget comment entity
 */
export type Comment = {
    /**
     * Comment identifier
     */
    id: string;
    /**
     * Comment content (HTML or plain text)
     */
    content: string;
    /**
     * Associated account ID
     */
    accountId?: string | null;
    /**
     * Associated budget line ID
     */
    lineId?: string | null;
    author: {
        /**
         * Author user ID
         */
        id?: string;
        /**
         * Author display name
         */
        name?: string;
        /**
         * Author email
         */
        email?: string;
    };
    /**
     * Comment creation timestamp
     */
    createdAt: string;
    /**
     * Comment last update timestamp
     */
    updatedAt?: string;
};

/**
 * Public ratepack containing reusable rate/cost data
 */
export type PublicRatepack = {
    /**
     * Unique ratepack identifier
     */
    id: string;
    /**
     * Ratepack display name
     */
    name: string;
    /**
     * URL-safe alias for the ratepack
     */
    alias?: string | null;
    /**
     * Optional ratepack description
     */
    description?: string | null;
    /**
     * List of available ratepack versions
     */
    versions: Array<string>;
    /**
     * Latest published version identifier
     */
    latestVersion?: string | null;
    /**
     * Ratepack creation timestamp
     */
    createdAt: string;
    /**
     * Ratepack last update timestamp
     */
    updatedAt: string;
};

/**
 * Individual rate item from a public ratepack
 */
export type PublicRate = {
    /**
     * Unique rate identifier
     */
    id: string;
    /**
     * Rate display name
     */
    name?: string | null;
    /**
     * Rate emoji or icon
     */
    emoji?: string | null;
    /**
     * Rate description
     */
    description?: string | null;
    /**
     * Additional notes about the rate
     */
    note?: string | null;
    /**
     * Rate quantity
     */
    quantity?: number | null;
    /**
     * Rate amount per unit
     */
    rate?: number | null;
    /**
     * Unit of measurement
     */
    unit?: 'hour' | 'day' | 'week' | 'month' | 'year' | 'each' | 'sqft' | 'sqm' | 'lnft' | 'lnm';
    /**
     * Rate multiplier
     */
    multiplier?: number | null;
    /**
     * Associated contact ID (usually null for public rates)
     */
    contactId?: string | null;
    /**
     * Agreement or contract reference
     */
    agreement?: string;
    /**
     * Local/regional identifier
     */
    local?: string;
    /**
     * Rate effective date
     */
    effectiveDate?: string;
    /**
     * Rate expiration date
     */
    expirationDate?: string;
    /**
     * Categorization labels
     */
    labels?: Array<string>;
};

/**
 * Individual rate item within a workspace ratepack
 */
export type Rate = {
    /**
     * Unique item identifier
     */
    id: string;
    /**
     * Item display name
     */
    name?: string | null;
    /**
     * Item emoji or icon
     */
    emoji?: string | null;
    /**
     * Item description
     */
    description?: string | null;
    /**
     * Additional notes about the item
     */
    note?: string | null;
    /**
     * Item quantity
     */
    quantity?: number | null;
    /**
     * Item rate or cost per unit
     */
    rate?: number | null;
    /**
     * Unit of measurement
     */
    unit?: 'hour' | 'day' | 'week' | 'month' | 'year' | 'each' | 'sqft' | 'sqm' | 'lnft' | 'lnm';
    /**
     * Rate multiplier
     */
    multiplier?: number | null;
    /**
     * Associated contact ID
     */
    contactId?: string | null;
    contact?: Contact;
};

/**
 * Input for creating a new rate
 */
export type CreateRateInput = {
    /**
     * Rate name
     */
    name?: string;
    /**
     * Rate emoji or icon
     */
    emoji?: string;
    /**
     * Rate description
     */
    description?: string;
    /**
     * Additional notes
     */
    note?: string;
    /**
     * Rate quantity
     */
    quantity?: number;
    /**
     * Rate or cost
     */
    rate?: number;
    /**
     * Unit of measurement
     */
    unit?: 'hour' | 'day' | 'week' | 'month' | 'year' | 'each' | 'sqft' | 'sqm' | 'lnft' | 'lnm';
    /**
     * Rate multiplier
     */
    multiplier?: number;
    /**
     * Associated contact ID
     */
    contactId?: string;
};

/**
 * Input for updating a rate
 */
export type UpdateRateInput = {
    /**
     * Updated rate name
     */
    name?: string;
    /**
     * Updated rate emoji or icon
     */
    emoji?: string;
    /**
     * Updated rate description
     */
    description?: string;
    /**
     * Updated additional notes
     */
    note?: string;
    /**
     * Updated rate quantity
     */
    quantity?: number;
    /**
     * Updated rate or cost
     */
    rate?: number;
    /**
     * Updated unit of measurement
     */
    unit?: 'hour' | 'day' | 'week' | 'month' | 'year' | 'each' | 'sqft' | 'sqm' | 'lnft' | 'lnm';
    /**
     * Updated rate multiplier
     */
    multiplier?: number;
    /**
     * Updated associated contact/vendor ID
     */
    contactId?: string;
};

/**
 * Tag entity for categorizing budget line items
 */
export type Tag = {
    /**
     * Unique tag identifier (same as tag name)
     */
    id: string;
    /**
     * Tag name (1-100 characters, immutable after creation)
     */
    name: string;
    /**
     * Optional hex color code for visual identification
     */
    color?: string;
    /**
     * Optional description for documentation purposes
     */
    description?: string;
};

/**
 * Request schema for creating a new tag
 */
export type CreateTagRequest = {
    /**
     * Tag name (must be unique within project)
     */
    name: string;
    /**
     * Optional hex color code for visual identification
     */
    color?: string;
    /**
     * Optional description for documentation purposes
     */
    description?: string;
};

/**
 * Request schema for updating an existing tag (only color can be updated)
 */
export type UpdateTagRequest = {
    /**
     * New hex color code
     */
    color?: string;
};

/**
 * Request schema for creating a new budget phase
 */
export type CreatePhaseRequest = {
    /**
     * Phase name
     */
    name: string;
    /**
     * Phase type
     */
    type: 'estimate' | 'actual' | 'rollup' | 'committed';
    /**
     * Phase color for UI display
     */
    color?: 'red' | 'rose' | 'pink' | 'fuchsia' | 'purple' | 'violet' | 'indigo' | 'blue' | 'sky' | 'cyan' | 'teal' | 'green' | 'yellow' | 'amber' | 'orange';
    currency?: {
        /**
         * Currency code (e.g., USD, EUR)
         */
        code?: string | null;
        /**
         * Currency symbol
         */
        symbol?: string | null;
        /**
         * Exchange rate multiplier
         */
        exchangeRate?: number | null;
    } | null;
    /**
     * ID of phase to copy data from
     */
    copyPhase?: string;
    /**
     * Whether phase is hidden
     */
    isHidden?: boolean;
    /**
     * For rollup phases - IDs of phases to aggregate
     */
    phaseIds?: Array<string>;
    /**
     * For rollup phases - operation to perform
     */
    operation?: 'sum' | 'difference';
    /**
     * ID interpretation mode - "user" for human-friendly IDs (default), "system" for database IDs
     */
    idMode?: 'user' | 'system';
};

/**
 * Request schema for updating an existing budget phase
 */
export type UpdatePhaseRequest = {
    /**
     * Updated phase name
     */
    name?: string;
    /**
     * Updated phase color
     */
    color?: 'red' | 'rose' | 'pink' | 'fuchsia' | 'purple' | 'violet' | 'indigo' | 'blue' | 'sky' | 'cyan' | 'teal' | 'green' | 'yellow' | 'amber' | 'orange';
    currency?: {
        /**
         * Currency code
         */
        code?: string | null;
        /**
         * Currency symbol
         */
        symbol?: string | null;
        /**
         * Exchange rate multiplier
         */
        exchangeRate?: number | null;
    } | null;
    /**
     * Updated hidden status
     */
    isHidden?: boolean;
    /**
     * ID interpretation mode - "user" for human-friendly IDs (default), "system" for database IDs
     */
    idMode?: 'user' | 'system';
};

/**
 * Request schema for creating a new fringe benefit
 */
export type CreateFringeRequest = {
    /**
     * Fringe code/symbol
     */
    code: string;
    /**
     * Fringe description
     */
    description?: string;
    /**
     * Fringe calculation units
     */
    units: 'percent' | 'flat';
    /**
     * Fringe rate (decimal for percent, amount for flat)
     */
    rate: number;
    /**
     * Salary cutoff limit
     */
    cutoff?: number | null;
    /**
     * ID interpretation mode - "user" for human-friendly IDs (default), "system" for database IDs
     */
    idMode?: 'user' | 'system';
};

/**
 * Request schema for updating an existing fringe benefit
 */
export type UpdateFringeRequest = {
    /**
     * Updated fringe code
     */
    code?: string;
    /**
     * Updated description
     */
    description?: string;
    /**
     * Updated units
     */
    units?: 'percent' | 'flat';
    /**
     * Updated rate
     */
    rate?: number;
    /**
     * Updated cutoff
     */
    cutoff?: number | null;
    /**
     * ID interpretation mode - "user" for human-friendly IDs (default), "system" for database IDs
     */
    idMode?: 'user' | 'system';
};

/**
 * Request schema for creating a new global variable
 */
export type CreateGlobalRequest = {
    /**
     * Variable symbol for formulas
     */
    symbol: string;
    /**
     * Variable description
     */
    description: string;
    /**
     * Formula or value
     */
    formula: string;
    /**
     * Unit type
     */
    unit?: string;
    /**
     * ID interpretation mode - "user" for human-friendly IDs (default), "system" for database IDs
     */
    idMode?: 'user' | 'system';
};

/**
 * Request schema for updating an existing global variable
 */
export type UpdateGlobalRequest = {
    /**
     * Updated symbol
     */
    symbol?: string;
    /**
     * Updated description
     */
    description?: string;
    /**
     * Updated formula
     */
    formula?: string;
    /**
     * Updated unit
     */
    unit?: string;
    /**
     * ID interpretation mode - "user" for human-friendly IDs (default), "system" for database IDs
     */
    idMode?: 'user' | 'system';
};

/**
 * Request schema for updating an existing budget line
 */
export type UpdateBudgetLineRequest = {
    /**
     * Updated line description (set to null to remove)
     */
    description?: string | null;
    /**
     * Updated account ID (set to null to remove)
     */
    accountId?: string | null;
    /**
     * Convert this line to an account type
     */
    convertToAccount?: boolean;
    /**
     * Updated phase-specific data (partial updates supported)
     */
    phaseData?: {
        [key: string]: {
            /**
             * Updated quantity
             */
            quantity?: number | null;
            /**
             * Updated unit
             */
            unit?: string | null;
            /**
             * Updated rate
             */
            rate?: number | null;
            /**
             * Updated multiplier
             */
            multiplier?: number | null;
            /**
             * Fringe IDs to apply
             */
            fringes?: Array<string>;
        };
    };
    /**
     * ID interpretation mode - "user" for human-friendly IDs (default), "system" for database IDs
     */
    idMode?: 'user' | 'system';
};

/**
 * Financial totals aggregated from all budget line items assigned to this tag
 */
export type TagTotals = {
    /**
     * Total amounts by phase ID. Keys depend on idMode parameter:
     * - idMode=user: phase aliases (e.g., "estimate", "actual")
     * - idMode=system: internal database IDs (UUID strings)
     *
     */
    phaseTotals: {
        [key: string]: number;
    };
    /**
     * Fringe benefit totals by phase ID. Keys follow same format as phaseTotals.
     *
     */
    fringeTotals: {
        [key: string]: number;
    };
    /**
     * Total actual expenses for this tag across all phases
     */
    actualTotal: number;
};

/**
 * Single tag response with financial totals included.
 * Used for endpoints that return individual tag details.
 *
 */
export type TagResponse = Tag & {
    totals: TagTotals;
};

/**
 * Multiple tags response for list endpoints
 */
export type TagsResponse = {
    /**
     * Array of tags with their financial totals
     */
    tags: Array<TagResponse>;
};

export type _Error = {
    /**
     * Error message
     */
    error: string;
    /**
     * Additional error details
     */
    details?: {
        [key: string]: unknown;
    };
    /**
     * Error code
     */
    code?: string;
};

/**
 * Project identifier (alias or ID)
 */
export type ProjectId = string;

/**
 * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
 */
export type IdMode = 'user' | 'system';

/**
 * Return results on or after this date (ISO 8601)
 */
export type StartDate = string;

/**
 * Return results on or before this date (ISO 8601)
 */
export type EndDate = string;

/**
 * Filter by whether attachments are present
 */
export type HasAttachments = boolean;

export type ListProjectsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Return only projects matching these IDs or aliases
         */
        id?: string | Array<string>;
        /**
         * Return projects belonging to these space IDs or aliases
         */
        spaceId?: string | Array<string>;
        /**
         * Filter by project status
         */
        status?: 'active' | 'archived';
        /**
         * Case-insensitive substring match on project name
         */
        name?: string | Array<string>;
        /**
         * Case-insensitive substring match on space name
         */
        spaceName?: string | Array<string>;
        /**
         * Return projects that include all specified labels
         */
        labels?: string | Array<string>;
    };
    url: '/projects';
};

export type ListProjectsErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListProjectsError = ListProjectsErrors[keyof ListProjectsErrors];

export type ListProjectsResponses = {
    /**
     * List of projects
     */
    200: {
        projects?: Array<Project>;
    };
};

export type ListProjectsResponse = ListProjectsResponses[keyof ListProjectsResponses];

export type CreateProjectData = {
    body: CreateProjectInput;
    path?: never;
    query?: never;
    url: '/projects';
};

export type CreateProjectErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateProjectError = CreateProjectErrors[keyof CreateProjectErrors];

export type CreateProjectResponses = {
    /**
     * Project created successfully
     */
    201: Project;
};

export type CreateProjectResponse = CreateProjectResponses[keyof CreateProjectResponses];

export type DeleteProjectData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type DeleteProjectErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteProjectError = DeleteProjectErrors[keyof DeleteProjectErrors];

export type DeleteProjectResponses = {
    /**
     * Project deleted successfully
     */
    204: void;
};

export type DeleteProjectResponse = DeleteProjectResponses[keyof DeleteProjectResponses];

export type GetProjectData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type GetProjectErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetProjectError = GetProjectErrors[keyof GetProjectErrors];

export type GetProjectResponses = {
    /**
     * Project details
     */
    200: Project;
};

export type GetProjectResponse = GetProjectResponses[keyof GetProjectResponses];

export type UpdateProjectData = {
    body: UpdateProjectInput;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}';
};

export type UpdateProjectErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateProjectError = UpdateProjectErrors[keyof UpdateProjectErrors];

export type UpdateProjectResponses = {
    /**
     * Project updated successfully
     */
    200: Project;
};

export type UpdateProjectResponse = UpdateProjectResponses[keyof UpdateProjectResponses];

export type GetBudgetData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: {
        /**
         * Filter by account ID or code (defaults to root account)
         */
        accountId?: string;
        /**
         * Filter by phase ID(s)
         */
        phaseId?: string | Array<string>;
        /**
         * Include hidden phases in the response
         */
        includeHiddenPhases?: boolean;
        /**
         * Filter budget by tag names (can be single tag or array of tags)
         */
        tags?: string | Array<string>;
        /**
         * How to apply the tag filter
         */
        tagFilterMode?: 'contains' | 'excludes';
        /**
         * Include related data in the response
         */
        expands?: Array<'fringes' | 'phases' | 'globals' | 'lines.contact' | 'lines.phaseData'>;
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/budget';
};

export type GetBudgetErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetBudgetError = GetBudgetErrors[keyof GetBudgetErrors];

export type GetBudgetResponses = {
    /**
     * Budget information
     */
    200: Budget;
};

export type GetBudgetResponse = GetBudgetResponses[keyof GetBudgetResponses];

export type CreateBudgetLinesData = {
    body: CreateBudgetInput;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget';
};

export type CreateBudgetLinesErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateBudgetLinesError = CreateBudgetLinesErrors[keyof CreateBudgetLinesErrors];

export type CreateBudgetLinesResponses = {
    /**
     * Budget lines created successfully
     */
    201: Budget;
};

export type CreateBudgetLinesResponse = CreateBudgetLinesResponses[keyof CreateBudgetLinesResponses];

export type DeleteBudgetLineData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Budget line identifier. Can be either a user-friendly ID (e.g., account code) or a system ID (UUID/nanoid), depending on the idMode parameter
         */
        lineId: string;
    };
    query?: {
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/budget/line/{lineId}';
};

export type DeleteBudgetLineErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteBudgetLineError = DeleteBudgetLineErrors[keyof DeleteBudgetLineErrors];

export type DeleteBudgetLineResponses = {
    /**
     * Budget line deleted successfully
     */
    204: void;
};

export type DeleteBudgetLineResponse = DeleteBudgetLineResponses[keyof DeleteBudgetLineResponses];

export type GetBudgetLineData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Budget line identifier. Can be either a user-friendly ID (e.g., account code) or a system ID (UUID/nanoid), depending on the idMode parameter
         */
        lineId: string;
    };
    query?: {
        /**
         * Filter budget line by tag names (can be single tag or array of tags)
         */
        tags?: string | Array<string>;
        /**
         * How to apply the tag filter
         */
        tagFilterMode?: 'contains' | 'excludes';
        /**
         * Include related data in the response
         */
        expands?: Array<'contact' | 'phaseData'>;
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/budget/line/{lineId}';
};

export type GetBudgetLineErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetBudgetLineError = GetBudgetLineErrors[keyof GetBudgetLineErrors];

export type GetBudgetLineResponses = {
    /**
     * Budget line details
     */
    200: BudgetLine;
};

export type GetBudgetLineResponse = GetBudgetLineResponses[keyof GetBudgetLineResponses];

export type UpdateBudgetLineData = {
    body: UpdateBudgetLineRequest;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Budget line identifier. Can be either a user-friendly ID (e.g., account code) or a system ID (UUID/nanoid), depending on the idMode parameter
         */
        lineId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget/line/{lineId}';
};

export type UpdateBudgetLineErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateBudgetLineError = UpdateBudgetLineErrors[keyof UpdateBudgetLineErrors];

export type UpdateBudgetLineResponses = {
    /**
     * Updated budget line
     */
    200: BudgetLine;
};

export type UpdateBudgetLineResponse = UpdateBudgetLineResponses[keyof UpdateBudgetLineResponses];

export type ListActualsData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: {
        /**
         * Filter by account ID(s) or codes
         */
        accountId?: string | Array<string>;
        /**
         * Return results on or after this date (ISO 8601)
         */
        startDate?: string;
        /**
         * Return results on or before this date (ISO 8601)
         */
        endDate?: string;
        /**
         * Filter by whether attachments are present
         */
        hasAttachments?: boolean;
        /**
         * Filter by whether an account is assigned
         */
        hasAssignedAccount?: boolean;
        /**
         * Filter by presence of linked transactions
         */
        hasLinkedTransaction?: boolean;
        /**
         * Filter by source IDs
         */
        sourceIds?: Array<string>;
        /**
         * Include related data in the response
         */
        expands?: Array<'contact' | 'subactual' | 'account' | 'subactual.account'>;
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/actuals';
};

export type ListActualsErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListActualsError = ListActualsErrors[keyof ListActualsErrors];

export type ListActualsResponses = {
    /**
     * List of actuals
     */
    200: {
        actuals?: Array<Actual>;
        totalAmount?: number;
    };
};

export type ListActualsResponse = ListActualsResponses[keyof ListActualsResponses];

export type DeleteActualData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Actual identifier (alias or ID)
         */
        actualId: string;
    };
    query?: never;
    url: '/projects/{projectId}/actuals/{actualId}';
};

export type DeleteActualErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteActualError = DeleteActualErrors[keyof DeleteActualErrors];

export type DeleteActualResponses = {
    /**
     * Actual deleted successfully
     */
    204: void;
};

export type DeleteActualResponse = DeleteActualResponses[keyof DeleteActualResponses];

export type GetActualData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Actual identifier (alias or ID)
         */
        actualId: string;
    };
    query?: {
        /**
         * Include related data in the response
         */
        expands?: Array<'contact' | 'subactual' | 'account'>;
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/actuals/{actualId}';
};

export type GetActualErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetActualError = GetActualErrors[keyof GetActualErrors];

export type GetActualResponses = {
    /**
     * Actual details
     */
    200: Actual;
};

export type GetActualResponse = GetActualResponses[keyof GetActualResponses];

export type CreateActualData = {
    body: CreateActualInput;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Actual identifier (alias or ID)
         */
        actualId: string;
    };
    query?: never;
    url: '/projects/{projectId}/actuals/{actualId}';
};

export type CreateActualErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateActualError = CreateActualErrors[keyof CreateActualErrors];

export type CreateActualResponses = {
    /**
     * Actual created successfully
     */
    201: Actual;
};

export type CreateActualResponse = CreateActualResponses[keyof CreateActualResponses];

export type UpdateActualData = {
    body: UpdateActualInput;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Actual identifier (alias or ID)
         */
        actualId: string;
    };
    query?: never;
    url: '/projects/{projectId}/actuals/{actualId}';
};

export type UpdateActualErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateActualError = UpdateActualErrors[keyof UpdateActualErrors];

export type UpdateActualResponses = {
    /**
     * Actual updated successfully
     */
    200: Actual;
};

export type UpdateActualResponse = UpdateActualResponses[keyof UpdateActualResponses];

export type UploadActualAttachmentData = {
    body: {
        /**
         * Attachment file
         */
        file: Blob | File;
    };
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Actual ID
         */
        actualId: string;
    };
    query?: never;
    url: '/projects/{projectId}/actuals/{actualId}/attachment';
};

export type UploadActualAttachmentErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UploadActualAttachmentError = UploadActualAttachmentErrors[keyof UploadActualAttachmentErrors];

export type UploadActualAttachmentResponses = {
    /**
     * Attachment uploaded successfully
     */
    201: File;
};

export type UploadActualAttachmentResponse = UploadActualAttachmentResponses[keyof UploadActualAttachmentResponses];

export type ListPurchaseOrdersData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: {
        /**
         * Filter by account ID(s) or codes
         */
        accountId?: string | Array<string>;
        /**
         * Return results on or after this date (ISO 8601)
         */
        startDate?: string;
        /**
         * Return results on or before this date (ISO 8601)
         */
        endDate?: string;
        /**
         * Filter by whether attachments are present
         */
        hasAttachments?: boolean;
        /**
         * Filter by purchase order status
         */
        status?: 'draft' | 'approved' | 'rejected' | 'pending' | 'paid' | Array<'draft' | 'approved' | 'rejected' | 'pending' | 'paid'>;
        /**
         * Include related data in the response
         */
        expands?: Array<'contact' | 'actuals' | 'purchaseOrderItems' | 'purchaseOrderItems.account'>;
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/purchaseOrders';
};

export type ListPurchaseOrdersErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListPurchaseOrdersError = ListPurchaseOrdersErrors[keyof ListPurchaseOrdersErrors];

export type ListPurchaseOrdersResponses = {
    /**
     * List of purchase orders
     */
    200: {
        purchaseOrders: Array<PurchaseOrder>;
    };
};

export type ListPurchaseOrdersResponse = ListPurchaseOrdersResponses[keyof ListPurchaseOrdersResponses];

export type DeletePurchaseOrderData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Purchase order identifier (alias or ID)
         */
        purchaseOrderId: string;
    };
    query?: never;
    url: '/projects/{projectId}/purchaseOrders/{purchaseOrderId}';
};

export type DeletePurchaseOrderErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeletePurchaseOrderError = DeletePurchaseOrderErrors[keyof DeletePurchaseOrderErrors];

export type DeletePurchaseOrderResponses = {
    /**
     * Purchase order deleted successfully
     */
    204: void;
};

export type DeletePurchaseOrderResponse = DeletePurchaseOrderResponses[keyof DeletePurchaseOrderResponses];

export type GetPurchaseOrderData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Purchase order identifier (alias or ID)
         */
        purchaseOrderId: string;
    };
    query?: {
        /**
         * Include related data in the response
         */
        expands?: Array<'contact' | 'actuals' | 'purchaseOrderItems' | 'purchaseOrderItems.account'>;
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/purchaseOrders/{purchaseOrderId}';
};

export type GetPurchaseOrderErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetPurchaseOrderError = GetPurchaseOrderErrors[keyof GetPurchaseOrderErrors];

export type GetPurchaseOrderResponses = {
    /**
     * Purchase order details
     */
    200: PurchaseOrder;
};

export type GetPurchaseOrderResponse = GetPurchaseOrderResponses[keyof GetPurchaseOrderResponses];

export type CreatePurchaseOrderData = {
    body: CreatePurchaseOrderInput;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Purchase order identifier (alias or ID)
         */
        purchaseOrderId: string;
    };
    query?: never;
    url: '/projects/{projectId}/purchaseOrders/{purchaseOrderId}';
};

export type CreatePurchaseOrderErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreatePurchaseOrderError = CreatePurchaseOrderErrors[keyof CreatePurchaseOrderErrors];

export type CreatePurchaseOrderResponses = {
    /**
     * Purchase order created successfully
     */
    201: PurchaseOrder;
};

export type CreatePurchaseOrderResponse = CreatePurchaseOrderResponses[keyof CreatePurchaseOrderResponses];

export type UpdatePurchaseOrderData = {
    body: UpdatePurchaseOrderInput;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Purchase order identifier (alias or ID)
         */
        purchaseOrderId: string;
    };
    query?: never;
    url: '/projects/{projectId}/purchaseOrders/{purchaseOrderId}';
};

export type UpdatePurchaseOrderErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdatePurchaseOrderError = UpdatePurchaseOrderErrors[keyof UpdatePurchaseOrderErrors];

export type UpdatePurchaseOrderResponses = {
    /**
     * Purchase order updated successfully
     */
    200: PurchaseOrder;
};

export type UpdatePurchaseOrderResponse = UpdatePurchaseOrderResponses[keyof UpdatePurchaseOrderResponses];

export type UploadPurchaseOrderAttachmentData = {
    body: {
        /**
         * Attachment file
         */
        file: Blob | File;
    };
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Purchase order identifier (alias or ID)
         */
        purchaseOrderId: string;
    };
    query?: never;
    url: '/projects/{projectId}/purchaseOrders/{purchaseOrderId}/attachment';
};

export type UploadPurchaseOrderAttachmentErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UploadPurchaseOrderAttachmentError = UploadPurchaseOrderAttachmentErrors[keyof UploadPurchaseOrderAttachmentErrors];

export type UploadPurchaseOrderAttachmentResponses = {
    /**
     * Attachment uploaded successfully
     */
    201: File;
};

export type UploadPurchaseOrderAttachmentResponse = UploadPurchaseOrderAttachmentResponses[keyof UploadPurchaseOrderAttachmentResponses];

export type ListBudgetPhasesData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: {
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/budget/phases';
};

export type ListBudgetPhasesErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListBudgetPhasesError = ListBudgetPhasesErrors[keyof ListBudgetPhasesErrors];

export type ListBudgetPhasesResponses = {
    /**
     * List of budget phases
     */
    200: {
        phases?: Array<Phase>;
    };
};

export type ListBudgetPhasesResponse = ListBudgetPhasesResponses[keyof ListBudgetPhasesResponses];

export type CreateBudgetPhaseData = {
    body: CreatePhaseRequest;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget/phases';
};

export type CreateBudgetPhaseErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateBudgetPhaseError = CreateBudgetPhaseErrors[keyof CreateBudgetPhaseErrors];

export type CreateBudgetPhaseResponses = {
    /**
     * Created budget phase
     */
    201: Phase;
};

export type CreateBudgetPhaseResponse = CreateBudgetPhaseResponses[keyof CreateBudgetPhaseResponses];

export type DeleteBudgetPhaseData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Phase identifier (alias or ID)
         */
        phaseId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget/phases/{phaseId}';
};

export type DeleteBudgetPhaseErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteBudgetPhaseError = DeleteBudgetPhaseErrors[keyof DeleteBudgetPhaseErrors];

export type DeleteBudgetPhaseResponses = {
    /**
     * Phase deleted successfully
     */
    204: void;
};

export type DeleteBudgetPhaseResponse = DeleteBudgetPhaseResponses[keyof DeleteBudgetPhaseResponses];

export type GetBudgetPhaseData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Phase identifier (alias or ID)
         */
        phaseId: string;
    };
    query?: {
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/budget/phases/{phaseId}';
};

export type GetBudgetPhaseErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetBudgetPhaseError = GetBudgetPhaseErrors[keyof GetBudgetPhaseErrors];

export type GetBudgetPhaseResponses = {
    /**
     * Budget phase details
     */
    200: Phase;
};

export type GetBudgetPhaseResponse = GetBudgetPhaseResponses[keyof GetBudgetPhaseResponses];

export type UpdateBudgetPhaseData = {
    body: UpdatePhaseRequest;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Phase identifier (alias or ID)
         */
        phaseId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget/phases/{phaseId}';
};

export type UpdateBudgetPhaseErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateBudgetPhaseError = UpdateBudgetPhaseErrors[keyof UpdateBudgetPhaseErrors];

export type UpdateBudgetPhaseResponses = {
    /**
     * Updated budget phase
     */
    200: Phase;
};

export type UpdateBudgetPhaseResponse = UpdateBudgetPhaseResponses[keyof UpdateBudgetPhaseResponses];

export type ListBudgetFringesData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: {
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/budget/fringes';
};

export type ListBudgetFringesErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListBudgetFringesError = ListBudgetFringesErrors[keyof ListBudgetFringesErrors];

export type ListBudgetFringesResponses = {
    /**
     * List of fringe benefits
     */
    200: {
        fringes?: Array<Fringe>;
    };
};

export type ListBudgetFringesResponse = ListBudgetFringesResponses[keyof ListBudgetFringesResponses];

export type CreateBudgetFringeData = {
    body: CreateFringeRequest;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget/fringes';
};

export type CreateBudgetFringeErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateBudgetFringeError = CreateBudgetFringeErrors[keyof CreateBudgetFringeErrors];

export type CreateBudgetFringeResponses = {
    /**
     * Created fringe benefit
     */
    201: Fringe;
};

export type CreateBudgetFringeResponse = CreateBudgetFringeResponses[keyof CreateBudgetFringeResponses];

export type DeleteBudgetFringeData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Fringe identifier (alias or ID)
         */
        fringeId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget/fringes/{fringeId}';
};

export type DeleteBudgetFringeErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteBudgetFringeError = DeleteBudgetFringeErrors[keyof DeleteBudgetFringeErrors];

export type DeleteBudgetFringeResponses = {
    /**
     * Fringe deleted successfully
     */
    204: void;
};

export type DeleteBudgetFringeResponse = DeleteBudgetFringeResponses[keyof DeleteBudgetFringeResponses];

export type GetBudgetFringeData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Fringe identifier (alias or ID)
         */
        fringeId: string;
    };
    query?: {
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/budget/fringes/{fringeId}';
};

export type GetBudgetFringeErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetBudgetFringeError = GetBudgetFringeErrors[keyof GetBudgetFringeErrors];

export type GetBudgetFringeResponses = {
    /**
     * Fringe benefit details
     */
    200: Fringe;
};

export type GetBudgetFringeResponse = GetBudgetFringeResponses[keyof GetBudgetFringeResponses];

export type UpdateBudgetFringeData = {
    body: UpdateFringeRequest;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Fringe identifier (alias or ID)
         */
        fringeId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget/fringes/{fringeId}';
};

export type UpdateBudgetFringeErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateBudgetFringeError = UpdateBudgetFringeErrors[keyof UpdateBudgetFringeErrors];

export type UpdateBudgetFringeResponses = {
    /**
     * Updated fringe benefit
     */
    200: Fringe;
};

export type UpdateBudgetFringeResponse = UpdateBudgetFringeResponses[keyof UpdateBudgetFringeResponses];

export type ListBudgetGlobalsData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: {
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/budget/globals';
};

export type ListBudgetGlobalsErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListBudgetGlobalsError = ListBudgetGlobalsErrors[keyof ListBudgetGlobalsErrors];

export type ListBudgetGlobalsResponses = {
    /**
     * List of global variables
     */
    200: {
        globals?: Array<Global>;
    };
};

export type ListBudgetGlobalsResponse = ListBudgetGlobalsResponses[keyof ListBudgetGlobalsResponses];

export type CreateBudgetGlobalData = {
    body: CreateGlobalRequest;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget/globals';
};

export type CreateBudgetGlobalErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateBudgetGlobalError = CreateBudgetGlobalErrors[keyof CreateBudgetGlobalErrors];

export type CreateBudgetGlobalResponses = {
    /**
     * Created global variable
     */
    201: Global;
};

export type CreateBudgetGlobalResponse = CreateBudgetGlobalResponses[keyof CreateBudgetGlobalResponses];

export type DeleteBudgetGlobalData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Global variable identifier (alias or ID)
         */
        globalId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget/globals/{globalId}';
};

export type DeleteBudgetGlobalErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteBudgetGlobalError = DeleteBudgetGlobalErrors[keyof DeleteBudgetGlobalErrors];

export type DeleteBudgetGlobalResponses = {
    /**
     * Global deleted successfully
     */
    204: void;
};

export type DeleteBudgetGlobalResponse = DeleteBudgetGlobalResponses[keyof DeleteBudgetGlobalResponses];

export type GetBudgetGlobalData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Global variable identifier (alias or ID)
         */
        globalId: string;
    };
    query?: {
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/budget/globals/{globalId}';
};

export type GetBudgetGlobalErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetBudgetGlobalError = GetBudgetGlobalErrors[keyof GetBudgetGlobalErrors];

export type GetBudgetGlobalResponses = {
    /**
     * Global variable details
     */
    200: Global;
};

export type GetBudgetGlobalResponse = GetBudgetGlobalResponses[keyof GetBudgetGlobalResponses];

export type UpdateBudgetGlobalData = {
    body: UpdateGlobalRequest;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Global variable identifier (alias or ID)
         */
        globalId: string;
    };
    query?: never;
    url: '/projects/{projectId}/budget/globals/{globalId}';
};

export type UpdateBudgetGlobalErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateBudgetGlobalError = UpdateBudgetGlobalErrors[keyof UpdateBudgetGlobalErrors];

export type UpdateBudgetGlobalResponses = {
    /**
     * Updated global variable
     */
    200: Global;
};

export type UpdateBudgetGlobalResponse = UpdateBudgetGlobalResponses[keyof UpdateBudgetGlobalResponses];

export type ListCommentsData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: {
        /**
         * Filter comments by account ID or code
         */
        accountId?: string;
        /**
         * Filter comments by budget line ID or alias
         */
        lineId?: string;
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/comments';
};

export type ListCommentsErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListCommentsError = ListCommentsErrors[keyof ListCommentsErrors];

export type ListCommentsResponses = {
    /**
     * List of project comments
     */
    200: {
        comments?: Array<Comment>;
    };
};

export type ListCommentsResponse = ListCommentsResponses[keyof ListCommentsResponses];

export type ListSpacesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include archived spaces
         */
        archived?: boolean;
        /**
         * Search spaces by name (case-insensitive)
         */
        search?: string;
        /**
         * Expand related data in the response
         */
        expands?: Array<'projects'>;
    };
    url: '/spaces';
};

export type ListSpacesErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListSpacesError = ListSpacesErrors[keyof ListSpacesErrors];

export type ListSpacesResponses = {
    /**
     * List of spaces
     */
    200: {
        spaces?: Array<Space>;
    };
};

export type ListSpacesResponse = ListSpacesResponses[keyof ListSpacesResponses];

export type CreateSpaceData = {
    body: CreateSpaceInput;
    path?: never;
    query?: never;
    url: '/spaces';
};

export type CreateSpaceErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateSpaceError = CreateSpaceErrors[keyof CreateSpaceErrors];

export type CreateSpaceResponses = {
    /**
     * Space created successfully
     */
    201: Space;
};

export type CreateSpaceResponse = CreateSpaceResponses[keyof CreateSpaceResponses];

export type DeleteSpaceData = {
    body?: never;
    path: {
        /**
         * Space identifier (alias or ID)
         */
        spaceId: string;
    };
    query?: never;
    url: '/spaces/{spaceId}';
};

export type DeleteSpaceErrors = {
    /**
     * Space contains active projects
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteSpaceError = DeleteSpaceErrors[keyof DeleteSpaceErrors];

export type DeleteSpaceResponses = {
    /**
     * Space deleted successfully
     */
    204: void;
};

export type DeleteSpaceResponse = DeleteSpaceResponses[keyof DeleteSpaceResponses];

export type GetSpaceData = {
    body?: never;
    path: {
        /**
         * Space identifier (alias or ID)
         */
        spaceId: string;
    };
    query?: {
        /**
         * Expand related data in the response
         */
        expands?: Array<'projects'>;
    };
    url: '/spaces/{spaceId}';
};

export type GetSpaceErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetSpaceError = GetSpaceErrors[keyof GetSpaceErrors];

export type GetSpaceResponses = {
    /**
     * Space details
     */
    200: Space;
};

export type GetSpaceResponse = GetSpaceResponses[keyof GetSpaceResponses];

export type UpdateSpaceData = {
    body: UpdateSpaceInput;
    path: {
        /**
         * Space identifier (alias or ID)
         */
        spaceId: string;
    };
    query?: never;
    url: '/spaces/{spaceId}';
};

export type UpdateSpaceErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateSpaceError = UpdateSpaceErrors[keyof UpdateSpaceErrors];

export type UpdateSpaceResponses = {
    /**
     * Space updated successfully
     */
    200: Space;
};

export type UpdateSpaceResponse = UpdateSpaceResponses[keyof UpdateSpaceResponses];

export type UploadFileData = {
    body: {
        /**
         * File to upload
         */
        file: Blob | File;
        /**
         * Associated project ID
         */
        projectId?: string;
        /**
         * File type/category
         */
        type?: string;
    };
    path?: never;
    query?: never;
    url: '/files/upload';
};

export type UploadFileErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * File too large
     */
    413: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UploadFileError = UploadFileErrors[keyof UploadFileErrors];

export type UploadFileResponses = {
    /**
     * File uploaded successfully
     */
    201: File;
};

export type UploadFileResponse = UploadFileResponses[keyof UploadFileResponses];

export type DownloadFileData = {
    body?: never;
    path: {
        /**
         * File identifier
         */
        fileId: string;
    };
    query?: never;
    url: '/files/{fileId}/download';
};

export type DownloadFileErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DownloadFileError = DownloadFileErrors[keyof DownloadFileErrors];

export type DownloadFileResponses = {
    /**
     * File content
     */
    200: Blob | File;
};

export type DownloadFileResponse = DownloadFileResponses[keyof DownloadFileResponses];

export type DeleteFileData = {
    body?: never;
    path: {
        /**
         * File identifier
         */
        fileId: string;
    };
    query?: never;
    url: '/files/{fileId}';
};

export type DeleteFileErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteFileError = DeleteFileErrors[keyof DeleteFileErrors];

export type DeleteFileResponses = {
    /**
     * File deleted successfully
     */
    204: void;
};

export type DeleteFileResponse = DeleteFileResponses[keyof DeleteFileResponses];

export type ListTagsData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: {
        /**
         * Filter tags by name (partial match search)
         */
        name?: string;
        /**
         * Field to sort by
         */
        sortBy?: 'name';
        /**
         * Sort direction
         */
        sortOrder?: 'asc' | 'desc';
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/tags';
};

export type ListTagsErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListTagsError = ListTagsErrors[keyof ListTagsErrors];

export type ListTagsResponses = {
    /**
     * List of project tags with financial totals
     */
    200: TagsResponse;
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type CreateTagData = {
    body: CreateTagRequest;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
    };
    query?: never;
    url: '/projects/{projectId}/tags';
};

export type CreateTagErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource conflict - duplicate entity or constraint violation
     */
    409: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateTagError = CreateTagErrors[keyof CreateTagErrors];

export type CreateTagResponses = {
    /**
     * Tag created successfully
     */
    201: TagResponse;
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type DeleteTagData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Tag identifier (same as tag name)
         */
        tagId: string;
    };
    query?: never;
    url: '/projects/{projectId}/tags/{tagId}';
};

export type DeleteTagErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteTagError = DeleteTagErrors[keyof DeleteTagErrors];

export type DeleteTagResponses = {
    /**
     * Tag deleted successfully
     */
    204: void;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type GetTagData = {
    body?: never;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Tag identifier (same as tag name)
         */
        tagId: string;
    };
    query?: {
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/projects/{projectId}/tags/{tagId}';
};

export type GetTagErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetTagError = GetTagErrors[keyof GetTagErrors];

export type GetTagResponses = {
    /**
     * Tag details with financial totals
     */
    200: TagResponse;
};

export type GetTagResponse = GetTagResponses[keyof GetTagResponses];

export type UpdateTagData = {
    body: UpdateTagRequest;
    path: {
        /**
         * Project identifier (alias or ID)
         */
        projectId: string;
        /**
         * Tag identifier (same as tag name)
         */
        tagId: string;
    };
    query?: never;
    url: '/projects/{projectId}/tags/{tagId}';
};

export type UpdateTagErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateTagError = UpdateTagErrors[keyof UpdateTagErrors];

export type UpdateTagResponses = {
    /**
     * Tag updated successfully
     */
    200: TagResponse;
};

export type UpdateTagResponse = UpdateTagResponses[keyof UpdateTagResponses];

export type ListContactsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by project IDs or aliases
         */
        projectIds?: Array<string>;
        /**
         * Filter by account ID(s) or codes
         */
        accountId?: string | Array<string>;
        /**
         * Filter by contact origin
         */
        origin?: Array<'onboarding' | 'manual'>;
        /**
         * Filter by linked user presence
         */
        hasLinkedUser?: boolean;
        /**
         * Filter by whether attachments are present
         */
        hasAttachments?: boolean;
        /**
         * Filter by tax document presence
         */
        hasTaxDocuments?: boolean;
        /**
         * Filter by email (case-insensitive partial match)
         */
        email?: string;
        /**
         * Filter by title (case-insensitive partial match)
         */
        title?: string;
        /**
         * Include related data in the response
         */
        expands?: Array<'secureInfo' | 'origin' | 'projects' | 'projects.accounts' | 'startwork' | 'taxDocuments' | 'attachments' | 'bankInfo' | 'linkedUser'>;
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/contacts';
};

export type ListContactsErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListContactsError = ListContactsErrors[keyof ListContactsErrors];

export type ListContactsResponses = {
    /**
     * List of contacts
     */
    200: {
        contacts?: Array<Contact>;
    };
};

export type ListContactsResponse = ListContactsResponses[keyof ListContactsResponses];

export type CreateContactData = {
    body: CreateContactInput;
    path?: never;
    query?: never;
    url: '/contacts';
};

export type CreateContactErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateContactError = CreateContactErrors[keyof CreateContactErrors];

export type CreateContactResponses = {
    /**
     * Contact created successfully
     */
    201: Contact;
};

export type CreateContactResponse = CreateContactResponses[keyof CreateContactResponses];

export type GetContactData = {
    body?: never;
    path: {
        /**
         * Contact identifier (alias or ID)
         */
        contactId: string;
    };
    query?: {
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/contacts/{contactId}';
};

export type GetContactErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetContactError = GetContactErrors[keyof GetContactErrors];

export type GetContactResponses = {
    /**
     * Contact details
     */
    200: Contact;
};

export type GetContactResponse = GetContactResponses[keyof GetContactResponses];

export type UpdateContactData = {
    body: UpdateContactInput;
    path: {
        /**
         * Contact identifier (alias or ID)
         */
        contactId: string;
    };
    query?: never;
    url: '/contacts/{contactId}';
};

export type UpdateContactErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateContactError = UpdateContactErrors[keyof UpdateContactErrors];

export type UpdateContactResponses = {
    /**
     * Contact updated successfully
     */
    200: Contact;
};

export type UpdateContactResponse = UpdateContactResponses[keyof UpdateContactResponses];

export type UploadContactTaxDocumentData = {
    body: {
        /**
         * Tax document file
         */
        file: Blob | File;
    };
    path: {
        /**
         * Contact identifier (alias or ID)
         */
        contactId: string;
    };
    query?: never;
    url: '/contacts/{contactId}/tax-document';
};

export type UploadContactTaxDocumentErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UploadContactTaxDocumentError = UploadContactTaxDocumentErrors[keyof UploadContactTaxDocumentErrors];

export type UploadContactTaxDocumentResponses = {
    /**
     * Tax document uploaded successfully
     */
    201: File;
};

export type UploadContactTaxDocumentResponse = UploadContactTaxDocumentResponses[keyof UploadContactTaxDocumentResponses];

export type UploadContactAttachmentData = {
    body: {
        /**
         * Attachment file
         */
        file: Blob | File;
    };
    path: {
        /**
         * Contact identifier (alias or ID)
         */
        contactId: string;
    };
    query?: never;
    url: '/contacts/{contactId}/attachment';
};

export type UploadContactAttachmentErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UploadContactAttachmentError = UploadContactAttachmentErrors[keyof UploadContactAttachmentErrors];

export type UploadContactAttachmentResponses = {
    /**
     * Attachment uploaded successfully
     */
    201: File;
};

export type UploadContactAttachmentResponse = UploadContactAttachmentResponses[keyof UploadContactAttachmentResponses];

export type ListTransactionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by transaction type
         */
        type?: Array<'bank.deposit' | 'bank.withdrawal' | 'bank.ach' | 'bank.wire' | 'card.spend' | 'card.payment' | 'card.dispute' | 'card.refund' | 'card.cashback'>;
        /**
         * Filter by transaction status
         */
        status?: Array<'posted' | 'pending' | 'void'>;
        /**
         * Filter by transaction sub-status
         */
        subStatus?: Array<'settled' | 'refund' | 'reverse' | 'rejected'>;
        /**
         * Filter by project ID(s)
         */
        projectId?: string | Array<string>;
        /**
         * Filter by source type
         */
        sourceType?: string | Array<string>;
        /**
         * Filter by source name
         */
        sourceName?: string | Array<string>;
        /**
         * Filter by source last 4 digits
         */
        sourceLast4?: string | Array<string>;
        /**
         * Filter by transaction description
         */
        description?: string;
        /**
         * Filter by merchant name
         */
        merchant?: string;
        /**
         * Filter by contact title
         */
        contactTitle?: string;
        /**
         * Filter by account assignment
         */
        hasAccount?: boolean;
        /**
         * Filter by actualization status
         */
        isActualized?: boolean;
        /**
         * Filter by whether attachments are present
         */
        hasAttachments?: boolean;
        /**
         * Filter by contact presence
         */
        hasContact?: boolean;
        /**
         * Return results on or after this date (ISO 8601)
         */
        startDate?: string;
        /**
         * Return results on or before this date (ISO 8601)
         */
        endDate?: string;
        /**
         * Include related data in the response
         */
        expands?: Array<'project' | 'contact' | 'account' | 'actual' | 'attachments'>;
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/transactions';
};

export type ListTransactionsErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListTransactionsError = ListTransactionsErrors[keyof ListTransactionsErrors];

export type ListTransactionsResponses = {
    /**
     * List of transactions
     */
    200: {
        transactions?: Array<Transaction>;
    };
};

export type ListTransactionsResponse = ListTransactionsResponses[keyof ListTransactionsResponses];

export type GetTransactionData = {
    body?: never;
    path: {
        /**
         * Transaction identifier
         */
        transactionId: string;
    };
    query?: {
        /**
         * ID interpretation mode. Controls how path and query parameter IDs (like lineId, accountId, phaseId) are interpreted - 'user' for human-readable IDs (account codes, phase names), 'system' for database IDs (UUIDs/nanoids). Also affects the format of IDs in responses.
         */
        idMode?: 'user' | 'system';
    };
    url: '/transactions/{transactionId}';
};

export type GetTransactionErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetTransactionError = GetTransactionErrors[keyof GetTransactionErrors];

export type GetTransactionResponses = {
    /**
     * Transaction details
     */
    200: Transaction;
};

export type GetTransactionResponse = GetTransactionResponses[keyof GetTransactionResponses];

export type UpdateTransactionData = {
    body: UpdateTransactionInput;
    path: {
        /**
         * Transaction identifier
         */
        transactionId: string;
    };
    query?: never;
    url: '/transactions/{transactionId}';
};

export type UpdateTransactionErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateTransactionError = UpdateTransactionErrors[keyof UpdateTransactionErrors];

export type UpdateTransactionResponses = {
    /**
     * Transaction updated successfully
     */
    200: Transaction;
};

export type UpdateTransactionResponse = UpdateTransactionResponses[keyof UpdateTransactionResponses];

export type UploadTransactionAttachmentData = {
    body: {
        /**
         * Attachment file
         */
        file: Blob | File;
    };
    path: {
        /**
         * Transaction identifier
         */
        transactionId: string;
    };
    query?: never;
    url: '/transactions/{transactionId}/attachment';
};

export type UploadTransactionAttachmentErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UploadTransactionAttachmentError = UploadTransactionAttachmentErrors[keyof UploadTransactionAttachmentErrors];

export type UploadTransactionAttachmentResponses = {
    /**
     * Attachment uploaded successfully
     */
    201: File;
};

export type UploadTransactionAttachmentResponse = UploadTransactionAttachmentResponses[keyof UploadTransactionAttachmentResponses];

export type ListWorkspaceRatesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Expand related data in the response
         */
        expands?: Array<'contact'>;
        /**
         * Search rates by name, description, or note
         */
        search?: string;
        /**
         * Maximum number of results to return
         */
        limit?: number;
        /**
         * Number of results to skip for pagination
         */
        offset?: number;
    };
    url: '/rates';
};

export type ListWorkspaceRatesErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListWorkspaceRatesError = ListWorkspaceRatesErrors[keyof ListWorkspaceRatesErrors];

export type ListWorkspaceRatesResponses = {
    /**
     * List of workspace rates
     */
    200: {
        rates?: Array<Rate>;
    };
};

export type ListWorkspaceRatesResponse = ListWorkspaceRatesResponses[keyof ListWorkspaceRatesResponses];

export type CreateWorkspaceRateData = {
    body: CreateRateInput;
    path?: never;
    query?: never;
    url: '/rates';
};

export type CreateWorkspaceRateErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type CreateWorkspaceRateError = CreateWorkspaceRateErrors[keyof CreateWorkspaceRateErrors];

export type CreateWorkspaceRateResponses = {
    /**
     * Rate created successfully
     */
    201: Rate;
};

export type CreateWorkspaceRateResponse = CreateWorkspaceRateResponses[keyof CreateWorkspaceRateResponses];

export type DeleteWorkspaceRateData = {
    body?: never;
    path: {
        /**
         * Rate identifier
         */
        rateId: string;
    };
    query?: never;
    url: '/rates/{rateId}';
};

export type DeleteWorkspaceRateErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteWorkspaceRateError = DeleteWorkspaceRateErrors[keyof DeleteWorkspaceRateErrors];

export type DeleteWorkspaceRateResponses = {
    /**
     * Rate deleted successfully
     */
    204: void;
};

export type DeleteWorkspaceRateResponse = DeleteWorkspaceRateResponses[keyof DeleteWorkspaceRateResponses];

export type UpdateWorkspaceRateData = {
    body: UpdateRateInput;
    path: {
        /**
         * Rate identifier
         */
        rateId: string;
    };
    query?: never;
    url: '/rates/{rateId}';
};

export type UpdateWorkspaceRateErrors = {
    /**
     * Bad request - invalid parameters or request body
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type UpdateWorkspaceRateError = UpdateWorkspaceRateErrors[keyof UpdateWorkspaceRateErrors];

export type UpdateWorkspaceRateResponses = {
    /**
     * Rate updated successfully
     */
    200: Rate;
};

export type UpdateWorkspaceRateResponse = UpdateWorkspaceRateResponses[keyof UpdateWorkspaceRateResponses];

export type ListPublicRatepacksData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search ratepacks by name
         */
        search?: string;
    };
    url: '/public/rates';
};

export type ListPublicRatepacksErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type ListPublicRatepacksError = ListPublicRatepacksErrors[keyof ListPublicRatepacksErrors];

export type ListPublicRatepacksResponses = {
    /**
     * List of public ratepacks
     */
    200: {
        ratepacks?: Array<PublicRatepack>;
    };
};

export type ListPublicRatepacksResponse = ListPublicRatepacksResponses[keyof ListPublicRatepacksResponses];

export type GetPublicRatesData = {
    body?: never;
    path: {
        /**
         * Public ratepack identifier (ID or alias)
         */
        ratepackId: string;
    };
    query?: {
        /**
         * Search rates by name, description, or note
         */
        search?: string;
        /**
         * Maximum number of results to return
         */
        limit?: number;
        /**
         * Number of results to skip for pagination
         */
        offset?: number;
    };
    url: '/public/rates/{ratepackId}';
};

export type GetPublicRatesErrors = {
    /**
     * Unauthorized - invalid or missing API key
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetPublicRatesError = GetPublicRatesErrors[keyof GetPublicRatesErrors];

export type GetPublicRatesResponses = {
    /**
     * List of rates from the public ratepack
     */
    200: {
        rates?: Array<PublicRate>;
    };
};

export type GetPublicRatesResponse = GetPublicRatesResponses[keyof GetPublicRatesResponses];

export type ClientOptions = {
    baseUrl: 'https://api.saturation.io/api/v1' | (string & {});
};