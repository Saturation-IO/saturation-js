// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { ListProjectsData, ListProjectsResponses, ListProjectsErrors, CreateProjectData, CreateProjectResponses, CreateProjectErrors, DeleteProjectData, DeleteProjectResponses, DeleteProjectErrors, GetProjectData, GetProjectResponses, GetProjectErrors, UpdateProjectData, UpdateProjectResponses, UpdateProjectErrors, GetBudgetData, GetBudgetResponses, GetBudgetErrors, CreateBudgetLinesData, CreateBudgetLinesResponses, CreateBudgetLinesErrors, DeleteBudgetLineData, DeleteBudgetLineResponses, DeleteBudgetLineErrors, GetBudgetLineData, GetBudgetLineResponses, GetBudgetLineErrors, UpdateBudgetLineData, UpdateBudgetLineResponses, UpdateBudgetLineErrors, ListActualsData, ListActualsResponses, ListActualsErrors, DeleteActualData, DeleteActualResponses, DeleteActualErrors, GetActualData, GetActualResponses, GetActualErrors, CreateActualData, CreateActualResponses, CreateActualErrors, UpdateActualData, UpdateActualResponses, UpdateActualErrors, UploadActualAttachmentData, UploadActualAttachmentResponses, UploadActualAttachmentErrors, ListPurchaseOrdersData, ListPurchaseOrdersResponses, ListPurchaseOrdersErrors, DeletePurchaseOrderData, DeletePurchaseOrderResponses, DeletePurchaseOrderErrors, GetPurchaseOrderData, GetPurchaseOrderResponses, GetPurchaseOrderErrors, CreatePurchaseOrderData, CreatePurchaseOrderResponses, CreatePurchaseOrderErrors, UpdatePurchaseOrderData, UpdatePurchaseOrderResponses, UpdatePurchaseOrderErrors, UploadPurchaseOrderAttachmentData, UploadPurchaseOrderAttachmentResponses, UploadPurchaseOrderAttachmentErrors, ListBudgetPhasesData, ListBudgetPhasesResponses, ListBudgetPhasesErrors, CreateBudgetPhaseData, CreateBudgetPhaseResponses, CreateBudgetPhaseErrors, DeleteBudgetPhaseData, DeleteBudgetPhaseResponses, DeleteBudgetPhaseErrors, GetBudgetPhaseData, GetBudgetPhaseResponses, GetBudgetPhaseErrors, UpdateBudgetPhaseData, UpdateBudgetPhaseResponses, UpdateBudgetPhaseErrors, ListBudgetFringesData, ListBudgetFringesResponses, ListBudgetFringesErrors, CreateBudgetFringeData, CreateBudgetFringeResponses, CreateBudgetFringeErrors, DeleteBudgetFringeData, DeleteBudgetFringeResponses, DeleteBudgetFringeErrors, GetBudgetFringeData, GetBudgetFringeResponses, GetBudgetFringeErrors, UpdateBudgetFringeData, UpdateBudgetFringeResponses, UpdateBudgetFringeErrors, ListBudgetGlobalsData, ListBudgetGlobalsResponses, ListBudgetGlobalsErrors, CreateBudgetGlobalData, CreateBudgetGlobalResponses, CreateBudgetGlobalErrors, DeleteBudgetGlobalData, DeleteBudgetGlobalResponses, DeleteBudgetGlobalErrors, GetBudgetGlobalData, GetBudgetGlobalResponses, GetBudgetGlobalErrors, UpdateBudgetGlobalData, UpdateBudgetGlobalResponses, UpdateBudgetGlobalErrors, ListCommentsData, ListCommentsResponses, ListCommentsErrors, ListSpacesData, ListSpacesResponses, ListSpacesErrors, CreateSpaceData, CreateSpaceResponses, CreateSpaceErrors, DeleteSpaceData, DeleteSpaceResponses, DeleteSpaceErrors, GetSpaceData, GetSpaceResponses, GetSpaceErrors, UpdateSpaceData, UpdateSpaceResponses, UpdateSpaceErrors, UploadFileData, UploadFileResponses, UploadFileErrors, DownloadFileData, DownloadFileResponses, DownloadFileErrors, DeleteFileData, DeleteFileResponses, DeleteFileErrors, ListTagsData, ListTagsResponses, ListTagsErrors, CreateTagData, CreateTagResponses, CreateTagErrors, DeleteTagData, DeleteTagResponses, DeleteTagErrors, GetTagData, GetTagResponses, GetTagErrors, UpdateTagData, UpdateTagResponses, UpdateTagErrors, ListContactsData, ListContactsResponses, ListContactsErrors, CreateContactData, CreateContactResponses, CreateContactErrors, GetContactData, GetContactResponses, GetContactErrors, UpdateContactData, UpdateContactResponses, UpdateContactErrors, UploadContactTaxDocumentData, UploadContactTaxDocumentResponses, UploadContactTaxDocumentErrors, UploadContactAttachmentData, UploadContactAttachmentResponses, UploadContactAttachmentErrors, ListTransactionsData, ListTransactionsResponses, ListTransactionsErrors, GetTransactionData, GetTransactionResponses, GetTransactionErrors, UpdateTransactionData, UpdateTransactionResponses, UpdateTransactionErrors, UploadTransactionAttachmentData, UploadTransactionAttachmentResponses, UploadTransactionAttachmentErrors, ListWorkspaceRatesData, ListWorkspaceRatesResponses, ListWorkspaceRatesErrors, CreateWorkspaceRateData, CreateWorkspaceRateResponses, CreateWorkspaceRateErrors, DeleteWorkspaceRateData, DeleteWorkspaceRateResponses, DeleteWorkspaceRateErrors, UpdateWorkspaceRateData, UpdateWorkspaceRateResponses, UpdateWorkspaceRateErrors, ListPublicRatepacksData, ListPublicRatepacksResponses, ListPublicRatepacksErrors, GetPublicRatesData, GetPublicRatesResponses, GetPublicRatesErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List projects
 * Retrieve projects for the current workspace. Supports filtering by ID, space, status, name, space name, or labels.
 */
export const listProjects = <ThrowOnError extends boolean = false>(options?: Options<ListProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProjectsResponses, ListProjectsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects',
        ...options
    });
};

/**
 * Create project
 * Create a new project in the current workspace
 */
export const createProject = <ThrowOnError extends boolean = false>(options: Options<CreateProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectResponses, CreateProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete project
 * Soft delete a project
 */
export const deleteProject = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectResponses, DeleteProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}',
        ...options
    });
};

/**
 * Get project
 * Retrieve a project by its ID or alias
 */
export const getProject = <ThrowOnError extends boolean = false>(options: Options<GetProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectResponses, GetProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}',
        ...options
    });
};

/**
 * Update project
 * Update an existing project's details
 */
export const updateProject = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectResponses, UpdateProjectErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get budget
 * Retrieve budget information for a project
 */
export const getBudget = <ThrowOnError extends boolean = false>(options: Options<GetBudgetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBudgetResponses, GetBudgetErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget',
        ...options
    });
};

/**
 * Create budget lines
 * Add new budget lines to an existing account within the budget hierarchy.
 *
 * This endpoint creates line items, sub-accounts, subtotals, or markups at the specified location in your budget structure. The target account must already exist in the budget hierarchy.
 *
 * Use `accountId: "root"` to add lines at the top level of your budget.
 *
 */
export const createBudgetLines = <ThrowOnError extends boolean = false>(options: Options<CreateBudgetLinesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBudgetLinesResponses, CreateBudgetLinesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete budget line
 * Delete a budget line from the project.
 *
 * The lineId parameter accepts both ID formats:
 * - With `idMode=user` (default): Use human-readable IDs
 * - With `idMode=system`: Use system-generated IDs
 *
 */
export const deleteBudgetLine = <ThrowOnError extends boolean = false>(options: Options<DeleteBudgetLineData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBudgetLineResponses, DeleteBudgetLineErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/line/{lineId}',
        ...options
    });
};

/**
 * Get budget line
 * Retrieve a specific budget line by its identifier.
 *
 * The lineId parameter accepts both user-friendly IDs and system IDs:
 * - With `idMode=user` (default): Use account codes like "1100" or "camera-dept"
 * - With `idMode=system`: Use UUIDs/nanoids like "abc123xyz" or "550e8400-e29b-41d4-a716"
 *
 */
export const getBudgetLine = <ThrowOnError extends boolean = false>(options: Options<GetBudgetLineData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBudgetLineResponses, GetBudgetLineErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/line/{lineId}',
        ...options
    });
};

/**
 * Update budget line
 * Update an existing budget line with new values.
 *
 * The lineId in the path accepts both ID formats based on the idMode in the request body:
 * - User-friendly IDs: Account codes like "2150" or descriptive IDs
 * - System IDs: Database identifiers when idMode is set to "system"
 *
 */
export const updateBudgetLine = <ThrowOnError extends boolean = false>(options: Options<UpdateBudgetLineData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateBudgetLineResponses, UpdateBudgetLineErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/line/{lineId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List actuals
 * Retrieve actual spending data for a project
 */
export const listActuals = <ThrowOnError extends boolean = false>(options: Options<ListActualsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListActualsResponses, ListActualsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/actuals',
        ...options
    });
};

/**
 * Delete actual
 * Delete an actual entry
 */
export const deleteActual = <ThrowOnError extends boolean = false>(options: Options<DeleteActualData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteActualResponses, DeleteActualErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/actuals/{actualId}',
        ...options
    });
};

/**
 * Get actual
 * Retrieve a specific actual entry
 */
export const getActual = <ThrowOnError extends boolean = false>(options: Options<GetActualData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActualResponses, GetActualErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/actuals/{actualId}',
        ...options
    });
};

/**
 * Create actual
 * Create a new actual entry for a project
 */
export const createActual = <ThrowOnError extends boolean = false>(options: Options<CreateActualData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateActualResponses, CreateActualErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/actuals/{actualId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update actual
 * Update an existing actual entry
 */
export const updateActual = <ThrowOnError extends boolean = false>(options: Options<UpdateActualData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateActualResponses, UpdateActualErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/actuals/{actualId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload actual attachment
 * Upload a receipt or other supporting document for an actual.
 * Accepts PDF or image files up to 10&nbsp;MB.
 */
export const uploadActualAttachment = <ThrowOnError extends boolean = false>(options: Options<UploadActualAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadActualAttachmentResponses, UploadActualAttachmentErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/actuals/{actualId}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List purchase orders
 * Retrieve purchase orders for a project
 */
export const listPurchaseOrders = <ThrowOnError extends boolean = false>(options: Options<ListPurchaseOrdersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPurchaseOrdersResponses, ListPurchaseOrdersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/purchaseOrders',
        ...options
    });
};

/**
 * Delete purchase order
 * Delete a purchase order
 */
export const deletePurchaseOrder = <ThrowOnError extends boolean = false>(options: Options<DeletePurchaseOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePurchaseOrderResponses, DeletePurchaseOrderErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/purchaseOrders/{purchaseOrderId}',
        ...options
    });
};

/**
 * Get purchase order
 * Retrieve a specific purchase order
 */
export const getPurchaseOrder = <ThrowOnError extends boolean = false>(options: Options<GetPurchaseOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPurchaseOrderResponses, GetPurchaseOrderErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/purchaseOrders/{purchaseOrderId}',
        ...options
    });
};

/**
 * Create purchase order
 * Create a new purchase order for a project
 */
export const createPurchaseOrder = <ThrowOnError extends boolean = false>(options: Options<CreatePurchaseOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePurchaseOrderResponses, CreatePurchaseOrderErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/purchaseOrders/{purchaseOrderId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update purchase order
 * Update an existing purchase order
 */
export const updatePurchaseOrder = <ThrowOnError extends boolean = false>(options: Options<UpdatePurchaseOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePurchaseOrderResponses, UpdatePurchaseOrderErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/purchaseOrders/{purchaseOrderId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload purchase order attachment
 * Upload a supporting document for a purchase order.
 * Accepts PDF or image files up to 10&nbsp;MB.
 */
export const uploadPurchaseOrderAttachment = <ThrowOnError extends boolean = false>(options: Options<UploadPurchaseOrderAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadPurchaseOrderAttachmentResponses, UploadPurchaseOrderAttachmentErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/purchaseOrders/{purchaseOrderId}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List budget phases
 * Retrieve all budget phases for a project
 */
export const listBudgetPhases = <ThrowOnError extends boolean = false>(options: Options<ListBudgetPhasesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBudgetPhasesResponses, ListBudgetPhasesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/phases',
        ...options
    });
};

/**
 * Create budget phase
 * Create a new budget phase for a project
 */
export const createBudgetPhase = <ThrowOnError extends boolean = false>(options: Options<CreateBudgetPhaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBudgetPhaseResponses, CreateBudgetPhaseErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/phases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete budget phase
 * Delete a budget phase from a project
 */
export const deleteBudgetPhase = <ThrowOnError extends boolean = false>(options: Options<DeleteBudgetPhaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBudgetPhaseResponses, DeleteBudgetPhaseErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/phases/{phaseId}',
        ...options
    });
};

/**
 * Get budget phase
 * Retrieve a specific budget phase
 */
export const getBudgetPhase = <ThrowOnError extends boolean = false>(options: Options<GetBudgetPhaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBudgetPhaseResponses, GetBudgetPhaseErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/phases/{phaseId}',
        ...options
    });
};

/**
 * Update budget phase
 * Update an existing budget phase
 */
export const updateBudgetPhase = <ThrowOnError extends boolean = false>(options: Options<UpdateBudgetPhaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateBudgetPhaseResponses, UpdateBudgetPhaseErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/phases/{phaseId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List budget fringes
 * Retrieve all fringe benefits for a project
 */
export const listBudgetFringes = <ThrowOnError extends boolean = false>(options: Options<ListBudgetFringesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBudgetFringesResponses, ListBudgetFringesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/fringes',
        ...options
    });
};

/**
 * Create budget fringe
 * Create a new fringe benefit for a project
 */
export const createBudgetFringe = <ThrowOnError extends boolean = false>(options: Options<CreateBudgetFringeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBudgetFringeResponses, CreateBudgetFringeErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/fringes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete budget fringe
 * Delete a fringe benefit from a project
 */
export const deleteBudgetFringe = <ThrowOnError extends boolean = false>(options: Options<DeleteBudgetFringeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBudgetFringeResponses, DeleteBudgetFringeErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/fringes/{fringeId}',
        ...options
    });
};

/**
 * Get budget fringe
 * Retrieve a specific fringe benefit
 */
export const getBudgetFringe = <ThrowOnError extends boolean = false>(options: Options<GetBudgetFringeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBudgetFringeResponses, GetBudgetFringeErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/fringes/{fringeId}',
        ...options
    });
};

/**
 * Update budget fringe
 * Update an existing fringe benefit
 */
export const updateBudgetFringe = <ThrowOnError extends boolean = false>(options: Options<UpdateBudgetFringeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateBudgetFringeResponses, UpdateBudgetFringeErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/fringes/{fringeId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List budget globals
 * Retrieve all global variables for a project
 */
export const listBudgetGlobals = <ThrowOnError extends boolean = false>(options: Options<ListBudgetGlobalsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBudgetGlobalsResponses, ListBudgetGlobalsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/globals',
        ...options
    });
};

/**
 * Create budget global
 * Create a new global variable for a project
 */
export const createBudgetGlobal = <ThrowOnError extends boolean = false>(options: Options<CreateBudgetGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBudgetGlobalResponses, CreateBudgetGlobalErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/globals',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete budget global
 * Delete a global variable from a project
 */
export const deleteBudgetGlobal = <ThrowOnError extends boolean = false>(options: Options<DeleteBudgetGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBudgetGlobalResponses, DeleteBudgetGlobalErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/globals/{globalId}',
        ...options
    });
};

/**
 * Get budget global
 * Retrieve a specific global variable
 */
export const getBudgetGlobal = <ThrowOnError extends boolean = false>(options: Options<GetBudgetGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBudgetGlobalResponses, GetBudgetGlobalErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/globals/{globalId}',
        ...options
    });
};

/**
 * Update budget global
 * Update an existing global variable
 */
export const updateBudgetGlobal = <ThrowOnError extends boolean = false>(options: Options<UpdateBudgetGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateBudgetGlobalResponses, UpdateBudgetGlobalErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/budget/globals/{globalId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List comments
 * Retrieve all comments for a project's budget
 */
export const listComments = <ThrowOnError extends boolean = false>(options: Options<ListCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCommentsResponses, ListCommentsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/comments',
        ...options
    });
};

/**
 * List spaces
 * Retrieve all project spaces/folders in the workspace
 */
export const listSpaces = <ThrowOnError extends boolean = false>(options?: Options<ListSpacesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSpacesResponses, ListSpacesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/spaces',
        ...options
    });
};

/**
 * Create space
 * Create a new project space/folder
 */
export const createSpace = <ThrowOnError extends boolean = false>(options: Options<CreateSpaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSpaceResponses, CreateSpaceErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/spaces',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete space
 * Soft delete a space (must not contain active projects)
 */
export const deleteSpace = <ThrowOnError extends boolean = false>(options: Options<DeleteSpaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSpaceResponses, DeleteSpaceErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/spaces/{spaceId}',
        ...options
    });
};

/**
 * Get space
 * Retrieve a specific space by ID or alias
 */
export const getSpace = <ThrowOnError extends boolean = false>(options: Options<GetSpaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSpaceResponses, GetSpaceErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/spaces/{spaceId}',
        ...options
    });
};

/**
 * Update space
 * Update an existing space
 */
export const updateSpace = <ThrowOnError extends boolean = false>(options: Options<UpdateSpaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSpaceResponses, UpdateSpaceErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/spaces/{spaceId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload file
 * Upload a file to project storage. Accepts PDF or image files up to 10&nbsp;MB.
 */
export const uploadFile = <ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadFileResponses, UploadFileErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/files/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Download file
 * Download/stream a file
 */
export const downloadFile = <ThrowOnError extends boolean = false>(options: Options<DownloadFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadFileResponses, DownloadFileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/files/{fileId}/download',
        ...options
    });
};

/**
 * Delete file
 * Delete a file from storage
 */
export const deleteFile = <ThrowOnError extends boolean = false>(options: Options<DeleteFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFileResponses, DeleteFileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/files/{fileId}',
        ...options
    });
};

/**
 * List tags
 * Retrieve all tags for a project with optional filtering and sorting.
 *
 * Tags are used for categorizing budget line items and enable advanced filtering
 * capabilities across budget data. Each tag includes financial totals aggregated
 * from all associated budget line items.
 *
 */
export const listTags = <ThrowOnError extends boolean = false>(options: Options<ListTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTagsResponses, ListTagsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/tags',
        ...options
    });
};

/**
 * Create tag
 * Create a new tag for the project. Tags are used to categorize budget line items
 * and enable advanced filtering capabilities.
 *
 * Note: Tag names cannot be changed after creation. Only the color can be updated.
 *
 */
export const createTag = <ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTagResponses, CreateTagErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete tag
 * Delete a tag and remove all its assignments from budget line items.
 * This operation cannot be undone.
 *
 */
export const deleteTag = <ThrowOnError extends boolean = false>(options: Options<DeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagResponses, DeleteTagErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/tags/{tagId}',
        ...options
    });
};

/**
 * Get tag
 * Retrieve a specific tag by ID, including its financial totals aggregated
 * from all associated budget line items.
 *
 */
export const getTag = <ThrowOnError extends boolean = false>(options: Options<GetTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagResponses, GetTagErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/tags/{tagId}',
        ...options
    });
};

/**
 * Update tag
 * Update a tag's properties. Currently, only the color can be updated.
 * Tag names and descriptions cannot be modified after creation.
 *
 */
export const updateTag = <ThrowOnError extends boolean = false>(options: Options<UpdateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTagResponses, UpdateTagErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/projects/{projectId}/tags/{tagId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List contacts
 * Retrieve contacts with optional filtering
 */
export const listContacts = <ThrowOnError extends boolean = false>(options?: Options<ListContactsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListContactsResponses, ListContactsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/contacts',
        ...options
    });
};

/**
 * Create contact
 * Create a new contact
 */
export const createContact = <ThrowOnError extends boolean = false>(options: Options<CreateContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateContactResponses, CreateContactErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get contact
 * Retrieve a specific contact by ID or alias
 */
export const getContact = <ThrowOnError extends boolean = false>(options: Options<GetContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContactResponses, GetContactErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/contacts/{contactId}',
        ...options
    });
};

/**
 * Update contact
 * Update an existing contact
 */
export const updateContact = <ThrowOnError extends boolean = false>(options: Options<UpdateContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateContactResponses, UpdateContactErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/contacts/{contactId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload tax document
 * Upload a tax document (e.g., W-9) for a contact.
 * Accepts PDF or image files up to 10&nbsp;MB.
 */
export const uploadContactTaxDocument = <ThrowOnError extends boolean = false>(options: Options<UploadContactTaxDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadContactTaxDocumentResponses, UploadContactTaxDocumentErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/contacts/{contactId}/tax-document',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Upload attachment
 * Upload a file to a contact profile.
 * Accepts PDF or image files up to 10&nbsp;MB.
 */
export const uploadContactAttachment = <ThrowOnError extends boolean = false>(options: Options<UploadContactAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadContactAttachmentResponses, UploadContactAttachmentErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/contacts/{contactId}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List transactions
 * Retrieve financial transactions with comprehensive filtering
 */
export const listTransactions = <ThrowOnError extends boolean = false>(options?: Options<ListTransactionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTransactionsResponses, ListTransactionsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/transactions',
        ...options
    });
};

/**
 * Get transaction
 * Retrieve a specific transaction by ID
 */
export const getTransaction = <ThrowOnError extends boolean = false>(options: Options<GetTransactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTransactionResponses, GetTransactionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/transactions/{transactionId}',
        ...options
    });
};

/**
 * Update transaction
 * Update an existing transaction
 */
export const updateTransaction = <ThrowOnError extends boolean = false>(options: Options<UpdateTransactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTransactionResponses, UpdateTransactionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/transactions/{transactionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload transaction attachment
 * Upload an attachment for a transaction
 */
export const uploadTransactionAttachment = <ThrowOnError extends boolean = false>(options: Options<UploadTransactionAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadTransactionAttachmentResponses, UploadTransactionAttachmentErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/transactions/{transactionId}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List workspace rates
 * Retrieve all rates from the workspace
 */
export const listWorkspaceRates = <ThrowOnError extends boolean = false>(options?: Options<ListWorkspaceRatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListWorkspaceRatesResponses, ListWorkspaceRatesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/rates',
        ...options
    });
};

/**
 * Create workspace rate
 * Create a new rate in the workspace
 */
export const createWorkspaceRate = <ThrowOnError extends boolean = false>(options: Options<CreateWorkspaceRateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWorkspaceRateResponses, CreateWorkspaceRateErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/rates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete workspace rate
 * Delete a rate from the workspace
 */
export const deleteWorkspaceRate = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceRateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceRateResponses, DeleteWorkspaceRateErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/rates/{rateId}',
        ...options
    });
};

/**
 * Update workspace rate
 * Update a rate in the workspace
 */
export const updateWorkspaceRate = <ThrowOnError extends boolean = false>(options: Options<UpdateWorkspaceRateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateWorkspaceRateResponses, UpdateWorkspaceRateErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/rates/{rateId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List public ratepacks
 * Retrieve all public ratepacks accessible across workspaces
 */
export const listPublicRatepacks = <ThrowOnError extends boolean = false>(options?: Options<ListPublicRatepacksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPublicRatepacksResponses, ListPublicRatepacksErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/public/rates',
        ...options
    });
};

/**
 * Get public rates
 * Retrieve all rates from a public ratepack
 */
export const getPublicRates = <ThrowOnError extends boolean = false>(options: Options<GetPublicRatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPublicRatesResponses, GetPublicRatesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/public/rates/{ratepackId}',
        ...options
    });
};